[[query-dsl-bool-query]]
=== Bool Query

A query that matches documents matching boolean combinations of other
queries. The bool query maps to Lucene `BooleanQuery`. It is built using
one or more boolean clauses, each clause with a typed occurrence. The
occurrence types are:

一种匹配文档布尔条件的复合查询。这种布尔查询对应于Lucene的 `BooleanQuery`。它包含一个
或者多个布尔子句，每个子句都有特定的类型。类型如下：
[cols="<,<",options="header",]
|=======================================================================
|Occur 类型 |Description 描述
|`must` |The clause (query) must appear in matching documents and will
contribute to the score.

返回的文档必须满足must子句的条件，并且会参与计算评分。

|`filter` |The clause (query) must appear in matching documents. However unlike
`must` the score of the query will be ignored. Filter clauses are executed
in <<query-filter-context,filter context>>, meaning that scoring is ignored
and clauses are considered for caching.

返回的文档必须满足filter子句的条件，但是它和 must 的不同是，它不会参与计算评分。Filter 子句
在 <<query-filter-context,filter context>> 里被执行，意味着不会参与计算评分，并且子句会
被缓存起来。
|`should` |The clause (query) should appear in the matching document. If the
`bool` query is in a <<query-filter-context,query context>> and has a `must` or
`filter` clause then a document will match the `bool` query even if none of the
`should` queries match. In this case these clauses are only used to influence
the score. If the `bool` query is a <<query-filter-context,filter context>>
or has neither `must` or `filter` then at least one of the `should` queries
must match a document for it to match the `bool` query. This behavior may be
explicitly controlled by settings the
<<query-dsl-minimum-should-match,`minimum_should_match`>> parameter.

返回的文档可能满足should子句的条件。如果布尔查询是在一个<<query-filter-context,query context>>
中，并且有一个 `must` 或者 `filter` 子句，那么一个文档将会匹配这个布尔查询，即使 `should`
查询没有被匹配。 在这个例子里，这些子句只是被用来影响评分。如果布尔查询是在一个
<<query-filter-context,filter context>>中或者没有 `must` ，也没有 `filter` ，那么这些
`should` 查询至少要有一个必须匹配到一个文档，才会返回。
<<query-dsl-minimum-should-match,`minimum_should_match`>>设置这个参数可以显示的控制这种
行为（至少满足几个 `should` 才会返回）
|`must_not` |The clause (query) must not appear in the matching
documents.  Clauses are executed in <<query-filter-context,filter context>> meaning
that scoring is ignored and clauses are considered for caching. Because scoring is
ignored, a score of `0` for all documents is returned.

返回的文档必须不满足must_not定义的条件。子句是在 <<query-filter-context,filter context>>
里被执行，意味着不会参与计算评分，并且子句会被缓存起来。因为评分被忽略，
所以返回的所有文档的评分都是0。
|=======================================================================

[IMPORTANT]
.Bool query in filter context 布尔查询在过滤器上下文中
========================================================================
If this query is used in a filter context and it has `should`
clauses then at least one `should` clause is required to match.

如果这个布尔查询在一个过滤器上下文中被使用，并且它有 `should` 子句，那么它至少要有一个
 `should` 子句匹配到文档，才会返回。
========================================================================

The `bool` query takes a _more-matches-is-better_ approach, so the score from
each matching `must` or `should` clause will be added together to provide the
final `_score` for each document.

布尔查询采用 _more-matches-is-better_ 方法，这样的话，每个匹配到 `must` or `should`
子句的分数将会被合并到一起以计算每个文档的最终分值。
[source,js]
--------------------------------------------------
POST _search
{
  "query": {
    "bool" : {
      "must" : {
        "term" : { "user" : "kimchy" }
      },
      "filter": {
        "term" : { "tag" : "tech" }
      },
      "must_not" : {
        "range" : {
          "age" : { "gte" : 10, "lte" : 20 }
        }
      },
      "should" : [
        { "term" : { "tag" : "wow" } },
        { "term" : { "tag" : "elasticsearch" } }
      ],
      "minimum_should_match" : 1,
      "boost" : 1.0
    }
  }
}
--------------------------------------------------
// CONSOLE

==== Scoring with `bool.filter` `bool.filter` 的分值计算

Queries specified under the `filter` element have no effect on scoring --
scores are returned as `0`.  Scores are only affected by the query that has
been specified.  For instance, all three of the following queries return
all documents where the `status` field contains the term `active`.

在`filter` 元素下指定的查询对计算评分没有影响，分数以 `0` 的形式返回。分数只会被特定的查询
影响。例如，下面的三个查询都会返回 `status` 字段包含单词 `active` 的所有文档。

This first query assigns a score of `0` to all documents, as no scoring
query has been specified:

由于没有指定计算评分的查询，第一个查询会给所有的文档分配 `0` 评分。
[source,js]
---------------------------------
GET _search
{
  "query": {
    "bool": {
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
---------------------------------
// CONSOLE

This `bool` query has a `match_all` query, which assigns a score of `1.0` to
all documents.

这个布尔查询有一个 `match_all` 查询，这会给所有的文档分配 `1.0` 评分。
[source,js]
---------------------------------
GET _search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
---------------------------------
// CONSOLE

This `constant_score` query behaves in exactly the same way as the second example above.
The `constant_score` query assigns a score of `1.0` to all documents matched
by the filter.

这个 `constant_score` 查询的效果和上面的第二个例子完全相同，它会给匹配过滤器条件所有文档分
配 `1.0` 评分。
[source,js]
---------------------------------
GET _search
{
  "query": {
    "constant_score": {
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
---------------------------------
// CONSOLE

==== Using named queries to see which clauses matched
==== 使用 named queries 去查看那个子句条件被匹配了
If you need to know which of the clauses in the bool query matched the documents
returned from the query, you can use
<<search-request-named-queries-and-filters,named queries>> to assign a name to
each clause.

如果你需要知道布尔查询里面的那个子句条件匹配了返回的文档，你能够使用
<<search-request-named-queries-and-filters,named queries>>给每一个子句条件分配
一个名字。
