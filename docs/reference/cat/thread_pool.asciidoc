[[cat-thread-pool]]
== cat thread pool

`thread_pool` 命令显示每个节点的集群线程池统计信息。
默认情况下，所有线程池均返回活动队列和队列拒绝统计信息。

[source,js]
--------------------------------------------------
GET /_cat/thread_pool
--------------------------------------------------
// CONSOLE

如下显示：

[source,txt]
--------------------------------------------------
node-0 bulk                0 0 0
node-0 fetch_shard_started 0 0 0
node-0 fetch_shard_store   0 0 0
node-0 flush               0 0 0
node-0 force_merge         0 0 0
node-0 generic             0 0 0
node-0 get                 0 0 0
node-0 index               0 0 0
node-0 listener            0 0 0
node-0 management          1 0 0
node-0 refresh             0 0 0
node-0 search              0 0 0
node-0 snapshot            0 0 0
node-0 warmer              0 0 0
--------------------------------------------------
// TESTRESPONSE[s/\d+/\\d+/ _cat]

第一列为节点名称

[source,txt]
--------------------------------------------------
node_name
node-0
--------------------------------------------------

第二列为线程池名称
[source,txt]
--------------------------------------------------
name
bulk
fetch_shard_started
fetch_shard_store
flush
force_merge
generic
get
index
listener
management
refresh
search
snapshot
warmer
--------------------------------------------------


接下来的三列显示每个线程池的 active ， queue 和 rejected 统计信息。

[source,txt]
--------------------------------------------------
active queue rejected
     0     0        0
     0     0        0
     0     0        0
     0     0        0
     0     0        0
     0     0        0
     0     0        0
     0     0        0
     0     0        0
     1     0        0
     0     0        0
     0     0        0
     0     0        0
     0     0        0
--------------------------------------------------

cat thread pool API 接受一个逗号分隔的常用表达式列表为 `thread_pool_patterns` URL 参数，
以匹配线程池名称。

[source,js]
--------------------------------------------------
GET /_cat/thread_pool/generic?v&h=id,name,active,rejected,completed
--------------------------------------------------
// CONSOLE

如下显示：

[source,txt]
--------------------------------------------------
id                     name    active rejected completed
0EWUhXeBQtaVGlexUeVwMg generic      0        0        70
--------------------------------------------------
// TESTRESPONSE[s/0EWUhXeBQtaVGlexUeVwMg/[\\w-]+/ s/\d+/\\d+/ _cat]

这里建议显示 thread pool 主机列和 active ， rejected ， completed 的统计信息。

所有 <<modules-threadpool,built-in thread pools>> 和自定义的线程池都可用。
[float]
==== Thread Pool Fields

对于每个线程池，可以使用下表中的字段名称加载关于它的详细信息。

[cols="<,<,<",options="header"]
|=======================================================================
|Field Name |Alias |Description
|`type` |`t` |线程池的当前类型 ， (`fixed` 或者 `scaling`)
|`active` |`a` |当前线程池中活动线程的数量
|`size` |`s` |当前线程池中的线程数
|`queue` |`q` |当前线程池的队列中的任务数
|`queue_size` |`qs` |当前线程池的队列中允许的最大任务数
|`rejected` |`r` |线程池执行程序被拒绝的任务数
|`largest` |`l` |当前线程池中活动线程的最大数量
|`completed` |`c` |线程池执行器已经完成的任务数
|`min` |`mi` |当前线程池中允许的最小活动线程数
|`max` |`ma` |当前线程池中允许的最大活动线程数
|`keep_alive` |`k` |为线程配置保持活动时间
|=======================================================================

[float]
=== Other Fields

除了每个线程池的详细信息之外，了解线程池驻留的位置也很方便。
因此，您可以请求其他详细信息，例如响应节点的 `ip` 。

[cols="<,<,<",options="header"]
|=======================================================================
|Field Name |Alias |Description
|`node_id` |`id` |唯一的节点 ID
|`ephemeral_id`|`eid` |短暂的节点 ID
|`pid` |`p` |正在运行节点的进程 ID
|`host` |`h` |当前节点的主机名
|`ip` |`i` |当前节点的 IP 地址
|`port` |`po` |当前节点绑定的传输端口
|=======================================================================
