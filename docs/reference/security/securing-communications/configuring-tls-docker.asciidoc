[role="xpack"]
[[configuring-tls-docker]]
=== 加密 {es} Docker 容器中的通讯

自 6.0.0 版本开始, {security} (黄金、白金以及企业订阅)需要对传输网络层进行
https://www.elastic.co/guide/en/elasticsearch/reference/6.0/breaking-6.0.0-xes.html[SSL/TLS] 加密。

本节演示了使用 ElasticSearch Docker 映像对 HTTPS 和 transport 进行 SSL/TLS 加密的简便方法。
本示例使用 Docker Compose 对容器进行管理。

了解更多内容, 请参考
{xpack-ref}/encrypting-communications.html[加密通讯] 以及
https://www.elastic.co/subscriptions[可用订阅]。

[float]
==== 准备环境

<<docker,使用 Docker 安装 {es}>>。

在一个新的空目录中，创建以下四个文件：

`instances.yml`：
["source","yaml"]
----
instances:
  - name: es01
    dns:
      - es01 <1>
      - localhost
    ip:
      - 127.0.0.1

  - name: es02
    dns:
      - es02
      - localhost
    ip:
      - 127.0.0.1
----
<1> 允许使用的内嵌的 Docker DNS 服务名。

`.env`：
[source,yaml]
----
CERTS_DIR=/usr/share/elasticsearch/config/certificates <1>
ELASTIC_PASSWORD=PleaseChangeMe <2>
----
<1> Docker 镜像中证书存放的路径。
<2> `elastic` 用户的初始密码。

[[getting-starter-tls-create-certs-composefile]]
`create-certs.yml`：
ifeval::["{release-state}"=="unreleased"]

WARNING: {version} 版本的 {es} 尚未发布, 因此 `create-certs.yml` 在该版本是不可用的。

endif::[]

ifeval::["{release-state}"!="unreleased"]
["source","yaml",subs="attributes"]
----
version: '2.2'

services:
  create_certs:
    container_name: create_certs
    image: docker.elastic.co/elasticsearch/elasticsearch-platinum:{version}
    command: >
      bash -c '
        if [[ ! -d config/certificates/certs ]]; then
          mkdir config/certificates/certs;
        fi;
        if [[ ! -f /local/certs/bundle.zip ]]; then
          bin/elasticsearch-certgen --silent --in config/certificates/instances.yml --out config/certificates/certs/bundle.zip;
          unzip config/certificates/certs/bundle.zip -d config/certificates/certs; <1>
        fi;
        chgrp -R 0 config/certificates/certs
      '
    user: $\{UID:-1000\}
    working_dir: /usr/share/elasticsearch
    volumes: ['.:/usr/share/elasticsearch/config/certificates']
----

<1> 新节点的证书和 CA 证书及秘钥被放置在本地 `certs` 文件夹中。
endif::[]

[[getting-starter-tls-create-docker-compose]]
`docker-compose.yml`：
ifeval::["{release-state}"=="unreleased"]

WARNING: {version} 版本的 {es} 尚未发布, 因此 `docker-compose.yml` 在该版本是不可用的。

endif::[]

ifeval::["{release-state}"!="unreleased"]
["source","yaml",subs="attributes"]
----
version: '2.2'

services:
  es01:
    container_name: es01
    image: docker.elastic.co/elasticsearch/elasticsearch-platinum:{version}
    environment:
      - node.name=es01
      - discovery.zen.minimum_master_nodes=2
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD <1>
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=trial <2>
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate <3>
      - xpack.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.ssl.key=$CERTS_DIR/es01/es01.key
    volumes: ['esdata_01:/usr/share/elasticsearch/data', './certs:$CERTS_DIR']
    ports:
      - 9200:9200
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  es02:
    container_name: es02
    image: docker.elastic.co/elasticsearch/elasticsearch:{version}
    environment:
      - node.name=es02
      - discovery.zen.minimum_master_nodes=2
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - discovery.zen.ping.unicast.hosts=es01
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=trial
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.ssl.certificate=$CERTS_DIR/es02/es02.crt
      - xpack.ssl.key=$CERTS_DIR/es02/es02.key
    volumes: ['esdata_02:/usr/share/elasticsearch/data', './certs:$CERTS_DIR']

  wait_until_ready:
    image: docker.elastic.co/elasticsearch/elasticsearch:{version}
    command: /usr/bin/true
    depends_on: {"es01": {"condition": "service_healthy"}}

volumes: {"esdata_01": {"driver": "local"}, "esdata_02": {"driver": "local"}}
----

<1> 使用 `.env` 文件中定义的密码初始化 `elastic` 用户。请参考
{stack-ov}/built-in-users.html#bootstrap-elastic-passwords[Elastic 初始密码]。
<2> 自动生成并应用试用（trial）订阅，以启用 {security} 功能。
<3> 禁用节点间通信真实性的校验。允许在不固定特定内部 IP 地址的情况下创建自签名证书。
endif::[]

[float]
==== 运行示例
. 生成证书（仅执行一次）：
+
--
["source","sh"]
----
docker-compose -f create-certs.yml up
----
--
. 启动两个 {es} 节点供配置 SSL/TLS：
+
--
["source","sh"]
----
docker-compose up -d
----
--
. 使用初始密码通过 SSL/TLS 访问 {es} API：
+
--
["source","sh"]
----
curl --cacert certs/ca/ca.crt -u elastic:PleaseChangeMe https://localhost:9200
----
// NOTCONSOLE
--
. `elasticsearch-setup-passwords` 工具还可用于为全部用户生成随机密码：
+
--
WARNING: 未使用 PowerShell 的 Windows 用户需要删除下面的代码段中的 `\` 并将多行合并为一行。
["source","sh"]
----
docker exec es01 /bin/bash -c "bin/elasticsearch-setup-passwords \
auto --batch \
-Expack.ssl.certificate=certificates/es01/es01.crt \
-Expack.ssl.certificate_authorities=certificates/ca/ca.crt \
-Expack.ssl.key=certificates/es01/es01.key \
--url https://localhost:9200"
----
--
